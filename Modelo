import os
import pytesseract
from PIL import Image
import pyttsx3
import html
import time
from sys import platform

# ========== CONFIGS INICIAIS ==========
class Config:
    """Classe para configura√ß√µes globais"""
    TESSERACT_LANG = 'por'  # idioma padr√£o para OCR
    HTML_TEMPLATE = """
    <!DOCTYPE html>
    <html lang="pt-BR">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Texto Acess√≠vel</title>
        <style>
            body {{
                font-family: Arial, sans-serif;
                line-height: 1.6;
                max-width: 800px;
                margin: 0 auto;
                padding: 20px;
                background-color: #f5f5f5;
                color: #333;
            }}
            h1 {{
                color: #2c3e50;
                text-align: center;
            }}
            .content {{
                background: white;
                padding: 20px;
                border-radius: 8px;
                box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            }}
        </style>
    </head>
    <body>
        <h1>Material Acess√≠vel</h1>
        <div class="content">
            <pre>{}</pre>
        </div>
    </body>
    </html>
    """

# Configura√ß√£o inicial do Tesseract
def configurar_tesseract():
    if platform == "win32":
        # Caminho comum para Windows
        tesseract_path = r'C:\Program Files\Tesseract-OCR\tesseract.exe'
        if os.path.exists(tesseract_path):
            pytesseract.pytesseract.tesseract_cmd = tesseract_path

# Configura√ß√£o inicial do motor de √°udio
def configurar_audio():
    engine = pyttsx3.init()
    # Configura√ß√µes de voz (pode ser ajustado)
    voices = engine.getProperty('voices')
    if voices:
        engine.setProperty('voice', voices[0].id)  # Primeira voz dispon√≠vel
    engine.setProperty('rate', 150)  # Velocidade da fala
    return engine

# Inicializa configura√ß√µes
configurar_tesseract()
engine = configurar_audio()

# ========== FUN√á√ïES PRINCIPAIS ==========
def ocr_imagem(caminho_imagem):
    """Realiza OCR na imagem e extrai o texto com tratamento de erros"""
    try:
        if not os.path.exists(caminho_imagem):
            raise FileNotFoundError(f"Arquivo n√£o encontrado: {caminho_imagem}")
        
        print(f"Processando imagem: {caminho_imagem}")
        imagem = Image.open(caminho_imagem)
        
        # Pr√©-processamento b√°sico (pode ser expandido)
        imagem = imagem.convert('L')  # Converte para escala de cinza
        
        texto = pytesseract.image_to_string(imagem, lang=Config.TESSERACT_LANG)
        return texto if texto.strip() else None
    
    except Exception as e:
        print(f"\033[31mErro ao realizar OCR: {e}\033[0m")  # Texto vermelho para erro
        return None

def formatar_texto(texto_bruto):
    """Formata o texto removendo linhas vazias e espa√ßos excessivos"""
    if not texto_bruto:
        return ""
    
    linhas = texto_bruto.split('\n')
    linhas_formatadas = []
    
    for linha in linhas:
        linha_limpa = ' '.join(linha.split()).strip()  # Remove espa√ßos m√∫ltiplos
        if linha_limpa:
            linhas_formatadas.append(linha_limpa)
    
    return '\n'.join(linhas_formatadas)

def ler_texto_em_audio(texto, velocidade=None):
    """Converte o texto para fala com controle de velocidade"""
    if not texto:
        print("Nenhum texto fornecido para leitura.")
        return
    
    try:
        if velocidade:
            engine.setProperty('rate', velocidade)
        
        print("Iniciando leitura em √°udio... (Pressione Ctrl+C para interromper)")
        engine.say(texto)
        engine.runAndWait()
    except KeyboardInterrupt:
        print("\nLeitura interrompida pelo usu√°rio.")
    except Exception as e:
        print(f"Erro ao reproduzir √°udio: {e}")

def converter_para_html(texto, nome_arquivo='material_acessivel.html'):
    """Converte o texto para uma p√°gina HTML formatada"""
    if not texto:
        print("Nenhum texto para converter.")
        return
    
    try:
        texto_html = Config.HTML_TEMPLATE.format(html.escape(texto))
        
        with open(nome_arquivo, 'w', encoding='utf-8') as f:
            f.write(texto_html)
        
        caminho_absoluto = os.path.abspath(nome_arquivo)
        print(f"\033[32mArquivo HTML gerado com sucesso!\033[0m")  # Texto verde para sucesso
        print(f"Localiza√ß√£o: {caminho_absoluto}")
        return caminho_absoluto
    except Exception as e:
        print(f"Erro ao gerar HTML: {e}")
        return None

def modo_professor(texto):
    """Simula um professor analisando o texto"""
    if not texto:
        print("Nenhum texto para an√°lise.")
        return
    
    print("\n\033[34m[Modo Professor Ativado]\033[0m")  # Texto azul
    print("Analisando o conte√∫do...\n")
    time.sleep(1)  # Simula processamento
    
    # Simula√ß√£o de an√°lise (substituir por IA no futuro)
    palavras = texto.split()
    num_palavras = len(palavras)
    num_linhas = len(texto.split('\n'))
    
    print(f"üìä An√°lise B√°sica:")
    print(f"- Total de palavras: {num_palavras}")
    print(f"- Total de linhas: {num_linhas}")
    print(f"- Tamanho do texto: {len(texto)} caracteres\n")
    
    print("üîç Principais conceitos identificados (simula√ß√£o):")
    conceitos = ["√°lgebra", "equa√ß√£o", "matem√°tica", "f√≥rmula", "n√∫mero"]
    encontrados = [c for c in conceitos if c in texto.lower()]
    print(", ".join(encontrados) if encontrados else "Nenhum conceito conhecido detectado")
    
    print("\nüí° Sugest√£o: Vamos focar nos exerc√≠cios pr√°ticos!")

# ========== INTERFACE DO USU√ÅRIO ==========
def mostrar_banner():
    """Exibe um banner estilizado"""
    print("\033[36m")  # Cor ciano
    print("=" * 60)
    print("SISTEMA DE TECNOLOGIA ASSISTIVA PARA EDUCA√á√ÉO".center(60))
    print("=" * 60)
    print("\033[0m")  # Resetar cor

def carregar_arquivo():
    """Interface para carregar o arquivo ou digitar texto"""
    mostrar_banner()
    print("\nOp√ß√µes de entrada:")
    print("1 - Capturar texto de imagem (OCR)")
    print("2 - Digitar texto manualmente")
    print("3 - Sair")
    
    while True:
        opcao = input("\nEscolha uma op√ß√£o (1-3): ").strip()
        
        if opcao == '1':
            caminho = input("Informe o caminho da imagem: ").strip()
            texto = ocr_imagem(caminho)
            if texto:
                return formatar_texto(texto)
            print("Falha ao extrair texto da imagem. Tente novamente.")
        elif opcao == '2':
            print("\nDigite seu texto (pressione Enter duas vezes para finalizar):")
            linhas = []
            while True:
                linha = input()
                if linha == '' and linhas and linhas[-1] == '':
                    break
                linhas.append(linha)
            return formatar_texto('\n'.join(linhas))
        elif opcao == '3':
            return None
        else:
            print("Op√ß√£o inv√°lida. Tente novamente.")

def menu_principal(texto):
    """Menu interativo principal"""
    while True:
        print("\n\033[1mMENU PRINCIPAL\033[0m")  # Negrito
        print("1 - Modo Professor (An√°lise do conte√∫do)")
        print("2 - Ler texto em √°udio")
        print("3 - Ajustar velocidade da leitura")
        print("4 - Converter para HTML")
        print("5 - Visualizar texto")
        print("6 - Sair")
        
        escolha = input("\nEscolha uma op√ß√£o (1-6): ").strip()
        
        if escolha == '1':
            modo_professor(texto)
        elif escolha == '2':
            ler_texto_em_audio(texto)
        elif escolha == '3':
            velocidade = input("Digite a velocidade (padr√£o=150, 100-200 recomendado): ")
            try:
                velocidade = int(velocidade)
                if 50 <= velocidade <= 300:
                    ler_texto_em_audio(texto, velocidade)
                else:
                    print("Velocidade deve estar entre 50 e 300")
            except ValueError:
                print("Digite um n√∫mero v√°lido")
        elif escolha == '4':
            nome_arquivo = input("Nome do arquivo HTML (deixe em branco para padr√£o): ").strip()
            if nome_arquivo:
                if not nome_arquivo.endswith('.html'):
                    nome_arquivo += '.html'
                converter_para_html(texto, nome_arquivo)
            else:
                converter_para_html(texto)
        elif escolha == '5':
            print("\n\033[1mTEXTO PROCESSADO:\033[0m")
            print(texto[:1000] + ("..." if len(texto) > 1000 else ""))  # Mostra parte do texto
        elif escolha == '6':
            print("Obrigado por usar o sistema! At√© logo!")
            break
        else:
            print("Op√ß√£o inv√°lida. Tente novamente.")

# ========== EXECU√á√ÉO PRINCIPAL ==========
def main():
    try:
        texto = carregar_arquivo()
        if texto:
            menu_principal(texto)
    except KeyboardInterrupt:
        print("\nOpera√ß√£o cancelada pelo usu√°rio.")
    except Exception as e:
        print(f"\n\033[31mErro inesperado: {e}\033[0m")
    finally:
        # Garante que o motor de √°udio seja encerrado corretamente
        if 'engine' in globals():
            engine.stop()

if __name__ == "__main__":
    main()
